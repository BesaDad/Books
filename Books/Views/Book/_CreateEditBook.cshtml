@model Books.Models.BookViewModel

<script type="text/javascript">
    $(function () {
            $("#@Html.IdFor(m => m.ISBN)").inputmask("999-9-99-999999-9", { clearIncomplete: true });

            $("#PublishYear").inputmask('integer',
                { min: '1800', max: '@DateTime.Now.Year', allowPlus: false, allowMinus: false, unmaskAsNumber: true });

            $("#@Html.IdFor(m => m.PageCount)").inputmask('integer',
                { min: '1', max: '10000', allowPlus: false, allowMinus: false, unmaskAsNumber: true });

    });

    function onSuccessDeleteBook(data) {
        if (data.success) {
            $('#gridBooks').data('kendoGrid').dataSource.read();
            $('#gridBooks').data('kendoGrid').refresh();
        } else {
            showAlertMessage("errorAlert", data.errors);
        }
    }

    function onSuccess(e) {
        if (e.operation == "upload") {
            for (var i = 0; i < e.files.length; i++) {
                var file = e.files[i].rawFile;

                if (file) {
                    var reader = new FileReader();

                    reader.readAsDataURL(file);
                            $("#@Html.IdFor(m=>m.ImagePath)").val(e.files[0].name);
                }
            }
        }
    }

    function index(dataItem, grid) {
        var data = $('#' + grid).data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }
</script>


@using (Ajax.BeginForm("CreateEditBook", "Book", new { area = "" },
                new AjaxOptions { OnSuccess = "OnSuccessCreateEditBook", OnFailure = "onFailureFormDefault", HttpMethod = "POST" },
                new { id = "createEditBookForm", autocomplete = "off", @class = "form-horizontal" }))
{
    <div class="modal-body">
        <div class="well  k-info-colored">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            @Html.ValidationSummary(true)
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.ImagePath)
            <div class="row">
                @*@if (!String.IsNullOrEmpty(Model.ImagePath))
                {
                    <div class="col-md-5">
                        <img src="@Url.Content("~/App_Data/" + Model.ImagePath)"/><br>
                        <a class="k-button k-state-active" href="@Url.Action("ImageRemove", "Book", new { fileNames = Model.ImagePath })">Удалить картинку</a>
                    </div>
                }*@
                <div class="col-md-10">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Tittle, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-7">
                            @Html.TextBoxFor(model => model.Tittle, new { @class = "form-control recize-none", @maxlength = "30", @placeholder = "Не более 30 символов" })
                            @Html.ValidationMessageFor(model => model.Tittle, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.PageCount, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-2">
                            @Html.TextBoxFor(model => model.PageCount, new { @class = "form-control", @maxlength = "5" })
                            @Html.ValidationMessageFor(model => model.PageCount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.PublishName, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-7">
                            @Html.TextBoxFor(model => model.PublishName, new { @class = "form-control", @maxlength = "30", @placeholder = "Не более 30 символов" })
                            @Html.ValidationMessageFor(model => model.PublishName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.PublishYear, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-2">
                            @Html.TextBoxFor(model => model.PublishYear, new { @class = "form-control", @name = "IcnCorrection", @maxlength = "4", @placeholder = "ГГГГ" })
                            @Html.ValidationMessageFor(model => model.PublishYear, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ISBN, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.ISBN, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ISBN, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ImagePath, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-6">
                            @(Html.Kendo().Upload()
                                                            .Name("files")
                                                            .Async(a => a
                                                                .Save("ImageSave", "Book", new { currFileName = Model.ImagePath })
                                                                .Remove("ImageRemove", "Book")
                                                                .AutoUpload(true)
                                                            )
                                                            .Events(e => e.Success("onSuccess"))
                                                            .ShowFileList(true)
                                                            .Multiple(false)
                                                            .DropZone(".dropZoneElement")
                                                            .Validation(validation =>
                                                            {
                                                                validation.AllowedExtensions(new string[] { ".jpg", ".jpeg", ".png", ".bmp", ".gif" });
                                                                validation.MinFileSize(500);
                                                            })
                            )
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Authors, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-6">
                            @(Html.Kendo().Grid(Model.Authors).Name("Authors")
                                                                            .ToolBar(tools => tools.Create().Text("Добавить"))
                                                                            .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                                            .HtmlAttributes(new { @class = "margin-lb15" })
                                                                            .Columns(columns =>
                                                                            {
                                                                                columns.Bound(p => p.FirstName)
                                                                                                    .ClientTemplate("#= FirstName # <input type='hidden' name='Authors[#= index(data, 'Authors')#].FirstName' value='#= FirstName #' />")
                                                                                                    .HeaderHtmlAttributes(new { @class = "tooltip-el" });

                                                                                columns.Bound(p => p.LastName)
                                                                                                    .ClientTemplate("#= LastName # <input type='hidden' name='Authors[#= index(data, 'Authors')#].LastName' value='#= LastName #' />")
                                                                                                    .HeaderHtmlAttributes(new { @class = "tooltip-el" });

                                                                                columns.Bound(p => p.Id).Hidden(true).IncludeInMenu(true)
                                                                                            .ClientTemplate("#= Id # <input type='hidden' name='Authors[#= index(data, 'Authors')#].Id' value='#= Id #' />");

                                                                                columns.Bound(p => p.BookId).Hidden(true).IncludeInMenu(true)
                                                                                            .ClientTemplate("#= BookId # <input type='hidden' name='Authors[#= index(data, 'Authors')#].BookId' value='#= BookId #' />");
                                                                                columns.Template(@<text></text>).Width(60).ClientTemplate(@"<a class=""k-font-icon k-grid-delete glyphicon glyphicon-trash"" href=""\#""></a>");
                                                                        })
                                                                .Scrollable(a => a.Height("100px"))
                                                                .DataSource(dataSource => dataSource.Ajax().Batch(true)
                                                                .Model(model =>
                                                                {
                                                                    model.Id(p => p.Id);
                                                                    model.Field(p => p.FirstName);
                                                                    model.Field(p => p.LastName);
                                                                })
                                                                .ServerOperation(false)))
                        </div>
                    </div>
                </div>
            </div>
            <div class="buttons-wrap">
                <button type="submit" class="k-button k-state-active">Сохранить</button>
                <button id="btnCancel" type="button" class="k-button k-state-default" data-dismiss="modal">Отменить</button>
            </div>
        </div>
    </div>
}
